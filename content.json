[{"title":"cssSelectorPriority","date":"2017-01-10T06:52:43.000Z","path":"2017/01/10/cssSelectorPriority/","text":"选择器特殊性 內联样式，1000 给定ID属性值，加0100 给定类属性值，属性选择或者伪类，加0010 给定元素或者伪元素，加0001 结合符和通用匹配符特殊性为0000 重要声明!important标志放在声明的最后面，重要声明与非重要声明发生冲突时永远是重要声明胜出 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; #test&#123; color: red; &#125; p[id=\"test\"]&#123; color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p id=\"test\"&gt; id选择器与id属性选择器优先级不同 #test 0100 p[id=\"test\"] 0011 最终呈现为红色 &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; #继承 有些属性不能继承，外边距，内边距，背景和边框等 继承的值无特殊性，tips：0000与没有特殊性是有差别的，因此当继承值与*比较时，通用匹配符胜出 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; p&#123; color: black; &#125; *&#123; color: grey; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;black &lt;em&gt;grey&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; #层叠 找出元素所有相关规则 按显示权重排序 读者!important声明 作者！important声明 作者正常声明 读者正常声明 代理默认样式 按照特殊性排序，如果多个声明的权重相同，则按照特殊性排序 按照出现顺序排序，一般认为导入样式表出现在前面，主样式表出现在后面","tags":[{"name":"css3","slug":"css3","permalink":"//happyeverday.github.io/tags/css3/"}]},{"title":"css3选择器总结","date":"2017-01-09T05:10:29.000Z","path":"2017/01/09/css3-selector/","text":"写在前面总结一下css选择器啦～有点长😳，下面是目录1.元素选择器 Element Selectors2.关系选择符 Relationship Selectors3.属性选择符 Attribute Selectors4.伪类选择符 Pseudo-Classes Selectors5.伪元素选择符 Pseudo-Element Selectors 1.Element Selectors12341. 通用选择符 *&#123;&#125;2. 类型选择符 E&#123;&#125;3. id选择符 E#id&#123;&#125;4. class选择符 E.class&#123;&#125; 2.Relationship Selectors12345678910111213141516171819201. 包含选择符 E F2. 子元素选择符 E &gt; F3. 相邻元素选择符 E + F //符合条件的相邻兄弟元素，注意两个元素之间的文本内容不会影响兄弟选择符起作用的，中间的文本不包含在兄弟元素中，而是父元素的一部分&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; p + p&#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;1&lt;/p&gt; 中间的文本 &lt;p&gt;我还是会显示成红色&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;4. 兄弟选择符 E ~ F //命中所有符合条件的兄弟元素，而不仅仅是相邻元素，css3中出现的 3.Attribute Selectors1.选择具有attr属性的元素1E[attr]&#123;&#125; 2.具有attr属性，且值为val的元素12345678910111213141516E[attr=\"val\"]&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; p[class=\"a b\"] p[class=\"a\"]&#123; /*不能匹配class=\"a b\"的元素，=匹配要求完全相等*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=\"a b\"&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 3.具有attr属性，且属性值为空格分割的单词列表，列表中包含val123456789101112131415p[class=\"val\"]&lt;!-- 示例 --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; p[class~=\"a\"] &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class=\"a b\"&gt;&lt;/p&gt; &lt;p class=\"a\"&gt;我也可以被匹配😄&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 4.具有attr属性，并且以val开头,结尾，包含,css3新增属性123p[class^=&quot;val&quot;]p[class$=&quot;val&quot;]p[class*=&quot;val&quot;] 5.选择属性值为val，以及以val-开头的元素1p[class|=&quot;val&quot;] 4.Pseudo-Classes Selectors1.链接伪类12345678910111213141516&lt;!--链接a未被访问之前的样式--&gt;E:link&lt;!--已经被访问过--&gt;E:visited&lt;!--鼠标悬停样式--&gt;E:hover&lt;!--用户激活，发生在鼠标点击和鼠标释放之间的事件，在hover后发生--&gt;E:active&lt;!--称为输入焦点时的样式，对应事件onfocus--&gt;E:focus&lt;!--超链接状态顺序，love+hate--&gt;a:link&#123;&#125;a:visited&#123;&#125;a:hover&#123;&#125;a:active&#123;&#125; 2.匹配特定语言123E:lang(fr)&lt;!--示例，匹配语言为english的p元素--&gt;p:lang(english)&#123;&#125; 3.not选择符12345E:not(s)&lt;!--示例，匹配非最后一个li元素--&gt;li:not(:last-child)&#123;border:1px solid black&#125; 4.匹配根元素，html中根元素永远是html1E:root 5.*-child 要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是body，即E可以是body的子元素 父元素的第一个子元素为E才能匹配，即匹配作为第一个子元素的E元素 E:nth-child(n)会选择父元素的第n个子元素E，如果第n个子元素不是E，则是无效选择符，但n会递增。 123456789101112131415161718192021222324252627282930E:first-childE:last-childE:only-childE:nth-child(n)E:nth-last-child(n)&lt;!--示例1--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;h1&gt;我是第一个元素&lt;/div&gt; &lt;p&gt;我不能被p:first-child匹配到&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!--示例2--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;我不能被div:first-child匹配到,伪类前面的标签，E指的是子元素的类型&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 6.*-of-type 要使该属性生效，E元素必须是某个元素的子元素，E的父元素最高是html，即E可以是html的子元素，也就是说E可以是body 可以选中第一个E元素，无论父元素的第一个子元素是否伪E，注意与:first-child的区别 12345E:first-of-typeE:last-of-typeE:only-of-typeE:nth-of-type(n)E:nth-last-of-type(n) 7.杂项1234567891011121314&lt;!--没有任何子元素（包括text元素,不包括comment元素）--&gt;E:empty&lt;!--被选中--&gt;E:checked&lt;!--可用状态--&gt;E:enabled&lt;!--备用状态--&gt;E:disabled&lt;!-- 匹配url #指向的E元素 --&gt;E:target&lt;!--打印时页面容器的样式--&gt;@page:first@page:left@page:right 5.Pseudo-Element Selectors1.::first-letter,::first-line 只对块级元素有效 12345678910111213141516&lt;!--示例--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; p::first-letter, span::first-letter&#123; font-size: 2em; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span&gt;first-letter,span元素无效&lt;/span&gt; &lt;p&gt;first-letter，f字号增大&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 2.E::before{} E::after{} 不设置content属性无效 默认盒模型为inline-box，通常为了能给伪元素赋予高度，边框等内容，将display设置为block 伪元素插入的位置，成为关联目标元素的字元素，放置在这个元素内容的前面或者后面 插入元素不是真正的元素，不能用js操作 插入内容 文本 content: ‘’ 元素属性 content: attr() 图片 content: url() 技术器 content: counter() 应用 img破损时，显示默认信息 创建边框效果等 12345678910111213141516171819202122&lt;!-- 示例 ，before和after的位置--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; .choosen&#123; width: 100px; height: 100px; border: 1px solid black; &#125; .choosen::before&#123; content: 'before'; display: block; border: 1px solid pink; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"choosen\"&gt;原有内容,::before显示在div内部&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3.css3新增 E::placeholder{} E::selection{} 占位符伪对象 需要注意的是，::selection只能定义被选择时的background-color，color及text-shadow 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; input::-webkit-input-placeholder &#123; color: green; &#125; input:-ms-input-placeholder &#123; // IE10+ color: green; &#125; input:-moz-placeholder &#123; // Firefox4-18 color: green; &#125; input::-moz-placeholder &#123; // Firefox19+ color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=\"text\" placeholder=\"占位符\" /&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"css3","slug":"css3","permalink":"//happyeverday.github.io/tags/css3/"}]},{"title":"2017,启航","date":"2017-01-06T06:20:23.000Z","path":"2017/01/06/start/","text":"写在前面第一篇博客破壳日，顺路记录下hexo+github搭建个人博客过程 hexo+github搭建个人博客步骤Step1.安装hexo1$ npm install hexo-cli -g Step2.初始化博客12$ hexo init blog$ cd blog Step3.愉快的让你的博客跑起来吧，对，就是如丝般顺滑1$ hexo server 执行命令后访问 //localhost:4000,瞬间成就感爆棚有木有哇！ Step4.创建一篇新文章吧1hexo new &quot;helloWorld&quot; 命令执行完,/source/_posts/目录下已经又了helloWorld.md了，对吧。然后愉快的写啊写。。。 Step5.生成静态文件依旧没什么难点，执行一下命令即可 1hexo generator 等等，我的聪明智慧可是要影响宇宙的，怎么能局限于localhost！好吧，配置下github吧～（先得去您的github上创建一个名为github用户名.io.git的仓库哦～） Step6.配置github在根目录的_config.yml文件下，修改配置 1234deploy: type: git repo: https://github.com/你的github用户名/你的github用户名.github.io.git branch: master Step7.发布到github1hexo deploy 什么，居然出现了错误信息,好气啊 1&apos;git&apos; does not appear to be a git repository 哦，原来是还需要安装个hexo-deployer-git，好吧，那就安装呗 1$ npm install hexo-deployer-git --save 安装完成后，再重新执行hexo deploy命令呗，访问 //你的github用户名.github.io 就可以看到新鲜出炉的博客喽～ 番外：更换hexo主题不喜欢默认的landscape主题怎么办？换呗！找啊找，找到了这篇主题贴有哪些好看的Hexo主题，都好漂亮，好满意有木有我是用的是yilia主题，具体配置作者在github上讲的很详细主要就是clone主题+选中主题+配置主题 1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改hexo根目录下的 _config.yml ： theme: yilia 修改themes/yilia/目录下的_config.xml,想怎么配置怎么配置喽～","tags":[{"name":"hexo","slug":"hexo","permalink":"//happyeverday.github.io/tags/hexo/"}]}]